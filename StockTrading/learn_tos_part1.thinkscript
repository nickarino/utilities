
AddChartBubble("time condition", # condition defining bar where bubble should appear
               "price location", # which price should bubble point at (eg, high, low)
               text,             # text to display in bubble
               color,            # bubble color
               up                # display bubble above price (yes) or below it (no)
);
AddLabel(visible,  # condition defining whether the label should appear; yes means always
         text,     # text to display in label
         color     # label color
);

declare lower;
#def a = close + open;
#def b = high + low;
#plot c = a/b;

plot DataLine = close;  # Example of plotting the closing price
DataLine.SetDefaultColor(Color.CYAN);


#declare lower;
#def a = close + open;
#def b = high + low;
#plot c = a/b;

#plot DataLine = close;  # Example of plotting the closing price
#DataLine.SetDefaultColor(Color.DARK_ORANGE);
#AddLabel(yes, "Current Close: " + close, Color.WHITE);
#
#Alert(close > 100, "Close is above 100: " + close, Alert.BAR, Sound.Bell);
#
#AddLabel(yes, if close > Average(close, 20) then "Uptrend" else "Downtrend");
#AddLabel(yes, "Average: " + Average(close, 20));
#
#AddChartBubble(close crosses above Average(close, 20), close, "Close price " + close + " is #greater");
#


#input timeFrame = {default DAY, "2 DAYS", "3 DAYS", "4 DAYS", WEEK, MONTH, "OPT EXP"};
#AddChartBubble(high == high(period = timeFrame), high, "High of " + timeFrame + ": " + high, Color.green, yes);
#AddChartBubble(low == low(period = timeFrame), low, "Low of " + timeFrame + ": " + low, Color.green, no);

# Alert
#runAlert = true; 

#if runAlert is true {
#    runAlert = false;
# }

#plot a = low;
#Alert(1, "Price crossed above the average");

# input message = "This is a log message"; # input the message to be logged

# def logMessage = "Log: " + message; # concatenate "Log: " to the message to indicate it's a log entry

# AddOrder(OrderType.BUY_AUTO, close > close[1], open[-1], 50, Color.ORANGE, Color.ORANGE, "Sample buy @ " + open[-1]);

#plot CurrentPrice = close;
#plot PastPrice = close[10];
#AddCloud(CurrentPrice, PastPrice, Color.VIOLET, Color.PINK);

#https://chat.openai.com/g/g-2fkFE8rbu-dall-e/c/6102bd61-9fd1-4e6f-8ea8-1898f0cbf174
script AssertSMA {
    input SMAValue = 0;
    input threshold = 0;
    
    plot AssertionFailed = if Average(close, 5) < threshold then 1 else Double.NaN;
    AssertionFailed.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
    AssertionFailed.SetDefaultColor(Color.RED);
    AssertionFailed.SetLineWeight(3);
    AssertionFailed.HideBubble();
    AssertionFailed.HideTitle();
}

# Use the assertion
#AssertSMA(SMAValue = Average(close, 5), threshold = 100);


#hint: Counts a value using an if statement, recursive variable type statement, and a CompoundValue statement.\nDemonstrates using chart bubbles and labels for debugging.

# def TrueRange;
# if BarNumber() == 1 {
#     TrueRange = ATR(14)[1];
# } else {
#     TrueRange = TrueRange[1];
# }
# def tr_rec = if BarNumber() == 1 then tr_rec[1] + 1 else tr_rec[1];
# def tr_cmpd = CompoundValue(1, if BarNumber() == 1 then ATR(14)[1] else tr_cmpd[1], Double.NaN);
# # plot Data = close; # not req'd if doing only labels and/or bubbles
# def numBars = HighestAll(BarNumber());
# def halfwayBar = numBars / 2;
# # bubble to test a value
# AddChartBubble("time condition"=BarNumber() == halfwayBar,
#                "price location"=high,
#                text="Bar Number " + BarNumber() + "\n is the halfwayBar (" + halfwayBar + ")",
#                color=Color.YELLOW,
#                up=no);
# # labels to test values
# AddLabel(yes, "# Bars on Chart: " + numBars, Color.YELLOW);
# AddLabel(yes, "TrueRange @ bar 1: " + GetValue(TrueRange, numBars - 1), Color.BLUE);
# AddLabel(yes, "TrueRange @ bar " + numBars + ": " + TrueRange, Color.ORANGE);
# AddLabel(yes, "tr_rec @ bar 1: " + GetValue(tr_rec, numBars - 1), Color.LIGHT_ORANGE);
# AddLabel(yes, "tr_rec @ bar " + numBars + ": " + tr_rec, Color.LIGHT_ORANGE);
# AddLabel(yes, "tr_cmpd @ bar 1: " + GetValue(tr_cmpd, numBars - 1), Color.LIGHT_GREEN);
# AddLabel(yes, "tr_cmpd @ bar " + numBars + ": " + tr_cmpd, Color.LIGHT_GREEN);
# 

# Define the condition for when to display the chart bubble
# def everyTenthBar = BarNumber() % 10 == 0; # This condition is true for every 10th bar

# Use the AddChartBubble function to add a bubble to the chart
AddChartBubble(
    BarNumber() % 10 == 0,        # "condition" parameter determines when the bubble is displayed.
    if (250 - BarNumber() * 10 > 0) then (250 - BarNumber() * 10) else 0 ,# "y" parameter for the vertical position of the bubble, set at the 'high' price for visibility.
    "Bar: " + BarNumber(),# "text" parameter to display the bar number.
    Color.WHITE,          # "color" parameter for the color of the bubble's text.
    if BarNumber() % 10 == 0 then yes else no);  # "up" parameter set to yes for the 10th bars, so the bubble appears above the price bar.

# AddLabel(yes, "Label 1" + "\r" + "Label 2" + "\n" + "Label 3", Color.WHITE);

script LinearLine {
    input x1 = 10;
    input y1 = 250;
    input x2 = 250;
    input y2 = 0;
    def x = BarNumber();
    def m = (y2 - y1) / (x2 - x1);
    def b = y1 - m * x1;
    plot LineValue = m * x + b;
}

plot MyLine = LinearLine();
MyLine.SetDefaultColor(Color.BLUE);

# Adding points at regular intervals
input interval = 20; # Interval for points
def barNumber = BarNumber();
def isPoint = barNumber >= 10 && barNumber <= 250 && (barNumber - 10) % interval == 0;

# Calculate Y-value for the bubble directly
def bubbleYValue = LinearLine().m * barNumber + LinearLine().b;
AddChartBubble(isPoint, bubbleYValue, AsText(barNumber) + ", " + AsText(bubbleYValue), Color.YELLOW, yes);


