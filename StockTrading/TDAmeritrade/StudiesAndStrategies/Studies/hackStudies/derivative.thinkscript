declare lower;

input length = 1; # you can change length to specify over how many bars the derivative should be calculated
input price = close; # default to using the closing price

# Calculate the derivative as the difference between the current price and the previous price
def derivative = (price - price[length]) / length;

# Plot the derivative
plot DerivativePlot = derivative;
DerivativePlot.SetDefaultColor(GetColor(1));

# vs momentum
# Declare the type of study

# Define the input parameters
def length2 = 1; # This is the lookback period for the momentum calculation.  Using one is the same as the derivative
# input price = close; # This indicates that we're using the close price for the calculation

# Calculate the momentum
def momentum = Momentum(length2, price);

# Plot the momentum on the chart
plot MomentumLine = momentum;
MomentumLine.SetDefaultColor(GetColor(1)); # Set the plot color (color number 1 is usually red)

# You can also add horizontal lines to help interpret the momentum
plot ZeroLine = 0;
ZeroLine.SetDefaultColor(GetColor(0)); # Set the color of the zero line to color number 0 (usually cyan)


# # declare lower;

input length = 14; # Length for the simple moving average
input price = close; # Default to using the closing price
input slopeLength = 1; # Number of bars to calculate the slope over, set to 1 for the immediate slope

# Calculate the simple moving average
def sma = Average(price, length);

# Calculate the slope as the difference between the current SMA value and the SMA value 'slopeLength' bars ago
# def smaSlope = (sma - sma[slopeLength]) / slopeLength;

# Plot the SMA slope
# plot SMA_Slope = smaSlope;
# SMA_Slope.SetDefaultColor(GetColor(1));

# Plot a magenta horizontal line at 0
# plot ZeroLine = 0;
# ZeroLine.SetDefaultColor(Color.MAGENTA);
# ZeroLine.SetStyle(Curve.SHORT_DASH);